services:
  postgres:
    image: postgres:17
    container_name: postgres
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: bigdata_lab2
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./исходные данные:/data
      - ./init:/docker-entrypoint-initdb.d
    ports:
      - "5432:5432"
    networks:
      - my_network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5

  clickhouse:
    image: clickhouse/clickhouse-server:22.8
    container_name: clickhouse
    ports:
      - "8123:8123"
      - "9000:9000"
    ulimits:
      nofile:
        soft: 262144
        hard: 262144
    volumes:
      - clickhouse_data:/var/lib/clickhouse
    networks:
      - my_network
    healthcheck:
      test: ["CMD", "clickhouse-client", "--query", "SELECT 1"]
      interval: 10s
      timeout: 5s
      retries: 5

  cassandra:
    image: cassandra:4.0
    container_name: cassandra
    ports:
      - "9042:9042"
    volumes:
      - cassandra_data:/var/lib/cassandra
    environment:
      - CASSANDRA_CLUSTER_NAME=BigDataCluster
      - CASSANDRA_KEYSPACE=bigdata_lab2
      - CASSANDRA_DC=dc1
    networks:
      - my_network
    healthcheck:
      test: ["CMD-SHELL", "cqlsh -u cassandra -p cassandra -e 'describe keyspaces' || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 5

  neo4j:
    image: neo4j:4.4
    container_name: neo4j
    environment:
      - NEO4J_AUTH=neo4j/password
      - NEO4J_dbms_memory_heap_max__size=2G
    ports:
      - "7474:7474"
      - "7687:7687"
    volumes:
      - neo4j_data:/data
      - neo4j_logs:/logs
    networks:
      - my_network
    healthcheck:
      test: ["CMD", "cypher-shell", "-u", "neo4j", "-p", "password", "RETURN 1"]
      interval: 20s
      timeout: 10s
      retries: 5

  mongodb:
    image: mongo:5.0
    container_name: mongodb
    ports:
      - "27017:27017"
    volumes:
      - mongodb_data:/data/db
    environment:
      - MONGO_INITDB_ROOT_USERNAME=root
      - MONGO_INITDB_ROOT_PASSWORD=example
    networks:
      - my_network
    healthcheck:
      test: ["CMD", "mongosh", "--eval", "db.adminCommand('ping')"]
      interval: 10s
      timeout: 5s
      retries: 5

  valkey:
    image: valkey/valkey:7.2
    container_name: valkey
    ports:
      - "6379:6379"
    volumes:
      - valkey_data:/data
    networks:
      - my_network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 5s
      timeout: 3s
      retries: 5

  spark-master:
    build: .
    container_name: spark-master
    volumes:
      - .:/app
    ports:
      - "8888:8888"
      - "4040:4040"
    environment:
      - SPARK_MASTER=spark://spark:7077
    networks:
      - my_network
    depends_on:
      postgres:
        condition: service_healthy
      clickhouse:
        condition: service_healthy
      cassandra:
        condition: service_healthy
      neo4j:
        condition: service_healthy
      mongodb:
        condition: service_healthy
      valkey:
        condition: service_healthy

  scheduler:
    image: bitnami/spark:3.3
    depends_on:
      - spark-master
    volumes:
      - ./scripts:/scripts
    command: >
      sh -c "
      echo '0 * * * * /opt/bitnami/spark/bin/spark-submit --master spark://spark-master:7077 /scripts/update_data.py' > /etc/crontabs/root &&
      echo '0 0 * * * /opt/bitnami/spark/bin/spark-submit --master spark://spark-master:7077 /scripts/update_reports.py' >> /etc/crontabs/root &&
      crond -f"

volumes:
  postgres_data:
  clickhouse_data:
  cassandra_data:
  neo4j_data:
  neo4j_logs:
  mongodb_data:
  valkey_data:

networks:
  my_network:
    driver: bridge